{"ast":null,"code":"import _defineProperty from \"/Users/Jenna/JavaScript/_Projects/shopping-cart/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ShopContent } from '../constants/ShopContent';\nimport { ADD_TO_CART, REMOVE_ITEM, ADD_QUANTITY, MINUS_QUANTITY, ADD_SHIPPING, SUBTRACT_SHIPPING, shippingCost, ADD_PICKUP, ORDER_SUBTOTAL } from '../constants/ActionTypes';\nconst initState = {\n  items: ShopContent,\n  addedItems: [],\n  total: 0\n};\n\nconst cartReducer = (state = initState, action) => {\n  // If item is added to cart...\n  if (action.type === ADD_TO_CART) {\n    let addedItem = state.items.find(item => item.id === action.id);\n    let existedItem = state.addedItems.find(item => action.id === item.id); // Check if item already exists in cart\n    // If item is already in cart, increase quantity by 1, and calculate total\n\n    if (existedItem) {\n      addedItem.quantity += 1;\n      return _objectSpread({}, state, {\n        total: state.total + addedItem.price\n      });\n    } else {\n      // Add item to cart and calculate total\n      addedItem.quantity = 1;\n      let newTotal = state.total + addedItem.price;\n      return _objectSpread({}, state, {\n        addedItems: [...state.addedItems, addedItem],\n        total: newTotal\n      });\n    }\n  } //If item is removed from cart, remove item and recalculate total\n\n\n  if (action.type === REMOVE_ITEM) {\n    let itemToRemove = state.addedItems.find(item => action.id === item.id);\n    let newItems = state.addedItems.filter(item => action.id !== item.id);\n    let newTotal = state.total - itemToRemove.price * itemToRemove.quantity;\n    console.log(itemToRemove);\n    return _objectSpread({}, state, {\n      addedItems: newItems,\n      total: newTotal\n    });\n  } // If item quantity is increased, increase quantity by 1 and recalculate total\n\n\n  if (action.type === ADD_QUANTITY) {\n    let addedItem = state.items.find(item => item.id === action.id);\n    addedItem.quantity += 1;\n    let newTotal = state.total + addedItem.price;\n    return _objectSpread({}, state, {\n      total: newTotal\n    });\n  } // If item quantity is decreased, subtract quantity and recalculate total\n\n\n  if (action.type === MINUS_QUANTITY) {\n    let addedItem = state.items.find(item => item.id === action.id);\n\n    if (addedItem.quantity === 1) {\n      let newItems = state.addedItems.filter(item => item.id !== action.id);\n      let newTotal = state.total - addedItem.price;\n      return _objectSpread({}, state, {\n        addedItems: newItems,\n        total: newTotal\n      });\n    } else {\n      addedItem.quantity -= 1;\n      let newTotal = state.total - addedItem.price;\n      return _objectSpread({}, state, {\n        total: newTotal\n      });\n    }\n  } // Display order subtotal\n\n\n  if (action.type === ORDER_SUBTOTAL) {\n    return _objectSpread({}, state, {\n      total: state.total - shippingCost\n    });\n  } // Logic to add and subtract shipping costs\n\n\n  if (action.type === ADD_SHIPPING) {\n    return _objectSpread({}, state, {\n      total: state.total + shippingCost\n    });\n  }\n\n  if (action.type === SUBTRACT_SHIPPING) {\n    return _objectSpread({}, state, {\n      total: state.total - shippingCost\n    });\n  } // Logic for in-store pickup\n\n\n  if (action.type === ADD_PICKUP) {\n    return _objectSpread({}, state, {\n      total: state.total\n    });\n  }\n\n  return state;\n};\n\nexport default cartReducer;","map":{"version":3,"sources":["/Users/Jenna/JavaScript/_Projects/shopping-cart/src/reducers/CartReducer.js"],"names":["ShopContent","ADD_TO_CART","REMOVE_ITEM","ADD_QUANTITY","MINUS_QUANTITY","ADD_SHIPPING","SUBTRACT_SHIPPING","shippingCost","ADD_PICKUP","ORDER_SUBTOTAL","initState","items","addedItems","total","cartReducer","state","action","type","addedItem","find","item","id","existedItem","quantity","price","newTotal","itemToRemove","newItems","filter","console","log"],"mappings":"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","sourcesContent":["import { ShopContent } from '../constants/ShopContent';\nimport { \n    ADD_TO_CART,\n    REMOVE_ITEM, \n    ADD_QUANTITY, \n    MINUS_QUANTITY,\n    ADD_SHIPPING,\n    SUBTRACT_SHIPPING,\n    shippingCost,\n    ADD_PICKUP,\n    ORDER_SUBTOTAL\n} from '../constants/ActionTypes';\n\nconst initState = {\n    items: ShopContent,\n    addedItems: [],\n    total: 0\n}\n\nconst cartReducer = (state = initState, action) => {\n    // If item is added to cart...\n    if (action.type === ADD_TO_CART) {\n        let addedItem = state.items.find(item => item.id === action.id);\n        let existedItem = state.addedItems.find(item => action.id === item.id);\n\n        // Check if item already exists in cart\n        // If item is already in cart, increase quantity by 1, and calculate total\n        if (existedItem) {\n            addedItem.quantity += 1;\n            return {\n                ...state,\n                total: state.total + addedItem.price\n            }\n        } else {\n            // Add item to cart and calculate total\n            addedItem.quantity = 1;\n            let newTotal = state.total + addedItem.price;\n            return {\n                ...state,\n                addedItems: [...state.addedItems, addedItem],\n                total: newTotal\n            }\n        }\n    }\n\n    //If item is removed from cart, remove item and recalculate total\n    if (action.type === REMOVE_ITEM) {\n        let itemToRemove = state.addedItems.find(item => action.id === item.id);\n        let newItems = state.addedItems.filter(item => action.id !== item.id);\n\n        let newTotal = state.total - (itemToRemove.price * itemToRemove.quantity);\n        console.log(itemToRemove);\n        return {\n            ...state,\n            addedItems: newItems,\n            total: newTotal\n        }\n    }\n    \n    // If item quantity is increased, increase quantity by 1 and recalculate total\n    if (action.type === ADD_QUANTITY) {\n        let addedItem = state.items.find(item => item.id === action.id);\n        \n        addedItem.quantity += 1;\n\n        let newTotal = state.total + addedItem.price;\n        return {\n            ...state,\n            total: newTotal\n        }\n\n    }\n\n    // If item quantity is decreased, subtract quantity and recalculate total\n    if (action.type === MINUS_QUANTITY) {\n        let addedItem = state.items.find(item => item.id === action.id);\n        if (addedItem.quantity === 1) {\n            let newItems = state.addedItems.filter(item => item.id !== action.id);\n            let newTotal = state.total - addedItem.price;\n            return {\n                ...state,\n                addedItems: newItems,\n                total: newTotal\n            }\n        } else {\n            addedItem.quantity -= 1;\n            let newTotal = state.total - addedItem.price;\n            return {\n                ...state,\n                total: newTotal\n            }\n        }\n    }\n\n    // Display order subtotal\n    if (action.type === ORDER_SUBTOTAL) {\n        return {\n            ...state,\n            total: state.total - shippingCost\n        }\n    }\n\n    // Logic to add and subtract shipping costs\n    if (action.type === ADD_SHIPPING) {\n        return{\n            ...state,\n            total: state.total + shippingCost\n        }\n    }\n\n    if (action.type === SUBTRACT_SHIPPING) {\n        return {\n            ...state,\n            total: state.total - shippingCost\n        }\n    }\n\n    // Logic for in-store pickup\n    if (action.type === ADD_PICKUP) {\n        return{\n            ...state,\n            total: state.total\n        }\n    }\n    \n    return state;\n}\n\n\nexport default cartReducer;"]},"metadata":{},"sourceType":"module"}