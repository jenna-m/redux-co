{"ast":null,"code":"var _jsxFileName = \"/Users/Jenna/JavaScript/_Projects/shopping-cart/src/components/footer/Contact.js\";\nimport React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\n\nclass Contact extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8\n      },\n      __self: this\n    }, \"Contact Us\"), React.createElement(\"div\", {\n      class: \"contact\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }, \"Do you have questions, comments, or concerns?\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }, \"Contact us with the form below.\"), React.createElement(\"div\", {\n      className: \"form-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, React.createElement(Formik, {\n      initialValies: {\n        name: '',\n        email: '',\n        message: ''\n      },\n      validate: values => {\n        let errors = {};\n\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\n          errors.email = 'Invalid email address';\n        }\n\n        return errors;\n      },\n      onSubmit: (values, {\n        setSubmitting\n      }) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          setSubmitting(false);\n        }, 400);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, ({\n      isSubmitting\n    }) => React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(Field, {\n      type: \"name\",\n      name: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"name\",\n      component: \"div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }), React.createElement(Field, {\n      type: \"email\",\n      name: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"email\",\n      component: \"div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }), React.createElement(Field, {\n      type: \"message\",\n      name: \"message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"message\",\n      component: \"div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      disabled: isSubmitting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"Submit\"))))));\n  }\n\n}\n\nexport default Contact;","map":{"version":3,"sources":["/Users/Jenna/JavaScript/_Projects/shopping-cart/src/components/footer/Contact.js"],"names":["React","Formik","Form","Field","ErrorMessage","Contact","Component","render","name","email","message","values","errors","test","setSubmitting","setTimeout","alert","JSON","stringify","isSubmitting"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,YAA9B,QAAkD,QAAlD;;AAEA,MAAMC,OAAN,SAAsBL,KAAK,CAACM,SAA5B,CAAsC;AAClCC,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAEI;AAAK,MAAA,KAAK,EAAC,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAFJ,EAGI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AACI,MAAA,aAAa,EAAI;AAAEC,QAAAA,IAAI,EAAE,EAAR;AAAYC,QAAAA,KAAK,EAAE,EAAnB;AAAuBC,QAAAA,OAAO,EAAE;AAAhC,OADrB;AAEI,MAAA,QAAQ,EAAKC,MAAM,IAAI;AACnB,YAAIC,MAAM,GAAG,EAAb;;AACA,YAAI,CAACD,MAAM,CAACF,KAAZ,EAAmB;AACfG,UAAAA,MAAM,CAACH,KAAP,GAAe,UAAf;AACH,SAFD,MAEO,IACH,CAAC,2CAA2CI,IAA3C,CAAgDF,MAAM,CAACF,KAAvD,CADE,EAEL;AACEG,UAAAA,MAAM,CAACH,KAAP,GAAe,uBAAf;AACH;;AACD,eAAOG,MAAP;AACC,OAZT;AAaQ,MAAA,QAAQ,EAAE,CAACD,MAAD,EAAS;AAAEG,QAAAA;AAAF,OAAT,KAA+B;AACrCC,QAAAA,UAAU,CAAC,MAAM;AACbC,UAAAA,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeP,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAD,CAAL;AACAG,UAAAA,aAAa,CAAC,KAAD,CAAb;AACH,SAHS,EAGP,GAHO,CAAV;AAIH,OAlBT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAoBS,CAAC;AAAEK,MAAAA;AAAF,KAAD,KACG,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,YAAD;AAAc,MAAA,IAAI,EAAC,MAAnB;AAA0B,MAAA,SAAS,EAAC,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,IAAI,EAAC,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EAII,oBAAC,YAAD;AAAc,MAAA,IAAI,EAAC,OAAnB;AAA2B,MAAA,SAAS,EAAC,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,EAKI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,SAAZ;AAAsB,MAAA,IAAI,EAAC,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,EAMI,oBAAC,YAAD;AAAc,MAAA,IAAI,EAAC,SAAnB;AAA6B,MAAA,SAAS,EAAC,KAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,EAOI;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,QAAQ,EAAEA,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPJ,CArBZ,CADJ,CAHJ,CAFJ,CADJ;AA6CH;;AA/CiC;;AAkDtC,eAAed,OAAf","sourcesContent":["import React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\n\nclass Contact extends React.Component {\n    render() {\n        return (\n            <div>\n                <h1>Contact Us</h1>\n                <div class=\"contact\">\n                    <h2>Do you have questions, comments, or concerns?</h2>\n                    <h3>Contact us with the form below.</h3>\n                    <div className=\"form-content\">\n                        <Formik\n                            initialValies = {{ name: '', email: '', message: '' }}\n                            validate = { values => {\n                                let errors = {};\n                                if (!values.email) {\n                                    errors.email = 'Required';\n                                } else if (\n                                    !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n                                ) {\n                                    errors.email = 'Invalid email address';\n                                }\n                                return errors;\n                                }}\n                                onSubmit={(values, { setSubmitting }) => {\n                                    setTimeout(() => {\n                                        alert(JSON.stringify(values, null, 2));\n                                        setSubmitting(false);\n                                    }, 400)\n                                }}\n                            >\n                                {({ isSubmitting }) => (\n                                    <Form>\n                                        <Field type=\"name\" name=\"name\" />\n                                        <ErrorMessage name=\"name\" component=\"div\" />\n                                        <Field type=\"email\" name=\"email\" />\n                                        <ErrorMessage name=\"email\" component=\"div\" />\n                                        <Field type=\"message\" name=\"message\" />\n                                        <ErrorMessage name=\"message\" component=\"div\" />\n                                        <button type=\"submit\" disabled={isSubmitting}>\n                                            Submit\n                                        </button>\n                                    </Form>\n                                )}\n                        </Formik>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Contact;"]},"metadata":{},"sourceType":"module"}