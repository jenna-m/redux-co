{"ast":null,"code":"var _jsxFileName = \"/Users/Jenna/JavaScript/_Projects/shopping-cart/src/components/footer/Contact.js\";\nimport React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nconst schema = yup.object().shape({\n  name: yup.string().required('Name required'),\n  email: yup.string().email().required('Valid email required'),\n  message: yup.string().min(10).max(600).required('Message required (600 characters max.)')\n});\n\nclass Contact extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"Contact Us\"), React.createElement(\"div\", {\n      class: \"contact\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, \"Do you have questions, comments, or concerns?\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, \"Contact us with the form below.\"), React.createElement(\"div\", {\n      className: \"contact-form-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, React.createElement(Formik, {\n      validationSchema: schema,\n      initialValies: {\n        name: '',\n        email: '',\n        message: ''\n      },\n      validate: values => {\n        let errors = {};\n\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\n          errors.email = 'Invalid email address';\n        }\n\n        return errors;\n      },\n      onSubmit: (values, {\n        setSubmitting\n      }) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          setSubmitting(false);\n        }, 400);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, ({\n      isSubmitting\n    }) => React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      for: true,\n      name: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"Name:\"), React.createElement(Field, {\n      type: \"name\",\n      name: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"name\",\n      component: \"div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      for: true,\n      name: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"Email:\"), React.createElement(Field, {\n      type: \"email\",\n      name: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"email\",\n      component: \"div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      for: true,\n      name: \"message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"Message:\"), React.createElement(Field, {\n      type: \"message\",\n      name: \"message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"message\",\n      component: \"div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      disabled: isSubmitting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Submit\"))))));\n  }\n\n}\n\nexport default Contact;","map":{"version":3,"sources":["/Users/Jenna/JavaScript/_Projects/shopping-cart/src/components/footer/Contact.js"],"names":["React","Formik","Form","Field","ErrorMessage","yup","schema","object","shape","name","string","required","email","message","min","max","Contact","Component","render","values","errors","test","setSubmitting","setTimeout","alert","JSON","stringify","isSubmitting"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\n\nconst schema = yup.object().shape({\n    name: yup.string().required('Name required'),\n    email: yup.string().email().required('Valid email required'),\n    message: yup.string().min(10).max(600).required('Message required (600 characters max.)')\n});\n\nclass Contact extends React.Component {\n    render() {\n        return (\n            <div>\n                <h1>Contact Us</h1>\n                <div class=\"contact\">\n                    <h2>Do you have questions, comments, or concerns?</h2>\n                    <h3>Contact us with the form below.</h3>\n                    <div className=\"contact-form-content\">\n                        <Formik\n                            validationSchema={schema}\n                            initialValies={{\n                                name: '', \n                                email: '', \n                                message: '' \n                            }}\n                            validate={ values => {\n                                let errors = {};\n                                if (!values.email) {\n                                    errors.email = 'Required';\n                                } else if (\n                                    !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n                                ) {\n                                    errors.email = 'Invalid email address';\n                                }\n                                return errors;\n                                }}\n                                onSubmit={(values, { setSubmitting }) => {\n                                    setTimeout(() => {\n                                        alert(JSON.stringify(values, null, 2));\n                                        setSubmitting(false);\n                                    }, 400)\n                                }}\n                            >\n                                {({ isSubmitting }) => (\n                                    <Form>\n                                        <label for name=\"name\">Name:</label>\n                                        <Field type=\"name\" name=\"name\" />\n                                        <ErrorMessage name=\"name\" component=\"div\" />\n                                        <label for name=\"email\">Email:</label>\n                                        <Field type=\"email\" name=\"email\" />\n                                        <ErrorMessage name=\"email\" component=\"div\" />\n                                        <label for name=\"message\">Message:</label>\n                                        <Field type=\"message\" name=\"message\" />\n                                        <ErrorMessage name=\"message\" component=\"div\" />\n                                        <button type=\"submit\" disabled={isSubmitting}>\n                                            Submit\n                                        </button>\n                                    </Form>\n                                )}\n                        </Formik>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Contact;"]},"metadata":{},"sourceType":"module"}