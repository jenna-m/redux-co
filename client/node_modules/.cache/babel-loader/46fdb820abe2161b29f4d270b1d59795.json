{"ast":null,"code":"import _defineProperty from \"/Users/Jenna/JavaScript/_Projects/shopping-cart/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ShopContent } from '../constants/ShopContent';\nimport { ADD_TO_CART, REMOVE_ITEM, ADD_QUANTITY, MINUS_QUANTITY, ADD_SHIPPING, SUBTRACT_SHIPPING, shippingCost, ADD_PICKUP } from '../constants/ActionTypes';\nconst initState = {\n  items: ShopContent,\n  addedItems: [],\n  subTotal: 0,\n  cartTotal: 0\n};\n\nconst cartReducer = (state = initState, action) => {\n  // Allows cart to not reset state upon refresh\n  if (action.type === 'persist/REHYDRATE') {\n    return _objectSpread({}, state, {\n      persistedState: action.payload\n    });\n  } // If item is added to cart...\n\n\n  if (action.type === ADD_TO_CART) {\n    let addedItem = state.items.find(item => item.id === action.id);\n    let existedItem = state.addedItems.find(item => action.id === item.id); // Check if item already exists in cart\n    // If item is already in cart, increase quantity by 1, and calculate subTotal and cartTotal\n\n    if (existedItem) {\n      addedItem.quantity += 1;\n      return _objectSpread({}, state, {\n        subTotal: state.subTotal + addedItem.price,\n        cartTotal: state.subTotal + addedItem.price + shippingCost\n      });\n    } else {\n      // Add item to cart and calculate subTotal and cartTotal\n      addedItem.quantity = 1;\n      let newSubTotal = state.subTotal + addedItem.price;\n      return _objectSpread({}, state, {\n        addedItems: [...state.addedItems, addedItem],\n        subTotal: newSubTotal,\n        cartTotal: newSubTotal + shippingCost\n      });\n    }\n  } //If item is removed from cart, remove item and recalculate subTotal and cartTotal\n\n\n  if (action.type === REMOVE_ITEM) {\n    let itemToRemove = state.addedItems.find(item => action.id === item.id);\n    let newItems = state.addedItems.filter(item => action.id !== item.id);\n    let newSubTotal = state.subTotal - itemToRemove.price * itemToRemove.quantity;\n    console.log(itemToRemove);\n    return _objectSpread({}, state, {\n      addedItems: newItems,\n      subTotal: newSubTotal,\n      cartTotal: newSubTotal + shippingCost\n    });\n  } // If item quantity is increased, increase quantity by 1 and recalculate subTotal and cartTotal\n\n\n  if (action.type === ADD_QUANTITY) {\n    let addedItem = state.items.find(item => item.id === action.id);\n    addedItem.quantity += 1;\n    let newSubTotal = state.subTotal + addedItem.price;\n    return _objectSpread({}, state, {\n      subTotal: newSubTotal,\n      cartTotal: newSubTotal + shippingCost\n    });\n  } // If item quantity is decreased, subtract quantity and recalculate subTotal and cartTotal\n\n\n  if (action.type === MINUS_QUANTITY) {\n    let addedItem = state.items.find(item => item.id === action.id);\n\n    if (addedItem.quantity === 1) {\n      let newItems = state.addedItems.filter(item => item.id !== action.id);\n      let newSubTotal = state.subTotal - addedItem.price;\n      return _objectSpread({}, state, {\n        addedItems: newItems,\n        subTotal: newSubTotal,\n        cartTotal: newSubTotal + shippingCost\n      });\n    } else {\n      addedItem.quantity -= 1;\n      let newSubTotal = state.subTotal - addedItem.price;\n      return _objectSpread({}, state, {\n        subTotal: newSubTotal,\n        cartTotal: newSubTotal + shippingCost\n      });\n    }\n  } // Logic to add and subtract shipping costs\n\n\n  if (action.type === ADD_SHIPPING) {\n    return _objectSpread({}, state, {\n      subTotal: state.subTotal,\n      shipping: shippingCost,\n      cartTotal: state.subTotal + shippingCost\n    });\n  }\n\n  if (action.type === SUBTRACT_SHIPPING) {\n    return _objectSpread({}, state, {\n      subTotal: state.subTotal,\n      shipping: 0,\n      cartTotal: state.subTotal - shippingCost\n    });\n  } // Logic for in-store pickup\n\n\n  if (action.type === ADD_PICKUP) {\n    return _objectSpread({}, state, {\n      subTotal: state.subTotal,\n      shipping: 0,\n      cartTotal: state.subTotal\n    });\n  }\n\n  return state;\n};\n\nexport default cartReducer;","map":{"version":3,"sources":["/Users/Jenna/JavaScript/_Projects/shopping-cart/src/reducers/CartReducer.js"],"names":["ShopContent","ADD_TO_CART","REMOVE_ITEM","ADD_QUANTITY","MINUS_QUANTITY","ADD_SHIPPING","SUBTRACT_SHIPPING","shippingCost","ADD_PICKUP","initState","items","addedItems","subTotal","cartTotal","cartReducer","state","action","type","persistedState","payload","addedItem","find","item","id","existedItem","quantity","price","newSubTotal","itemToRemove","newItems","filter","console","log","shipping"],"mappings":"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","sourcesContent":["import { ShopContent } from '../constants/ShopContent';\nimport { \n    ADD_TO_CART,\n    REMOVE_ITEM, \n    ADD_QUANTITY, \n    MINUS_QUANTITY,\n    ADD_SHIPPING,\n    SUBTRACT_SHIPPING,\n    shippingCost,\n    ADD_PICKUP\n} from '../constants/ActionTypes';\n\nconst initState = {\n    items: ShopContent,\n    addedItems: [],\n    subTotal: 0,\n    cartTotal: 0\n}\n\nconst cartReducer = (state = initState, action) => {\n    // Allows cart to not reset state upon refresh\n    if (action.type === 'persist/REHYDRATE') {\n        return {\n            ...state,\n            persistedState: action.payload\n        }\n    }\n\n    // If item is added to cart...\n    if (action.type === ADD_TO_CART) {\n        let addedItem = state.items.find(item => item.id === action.id);\n        let existedItem = state.addedItems.find(item => action.id === item.id);\n\n        // Check if item already exists in cart\n        // If item is already in cart, increase quantity by 1, and calculate subTotal and cartTotal\n        if (existedItem) {\n            addedItem.quantity += 1;\n            return {\n                ...state,\n                subTotal: state.subTotal + addedItem.price,\n                cartTotal: state.subTotal + addedItem.price + shippingCost\n            }\n        } else {\n            // Add item to cart and calculate subTotal and cartTotal\n            addedItem.quantity = 1;\n            let newSubTotal = state.subTotal + addedItem.price;\n            return {\n                ...state,\n                addedItems: [...state.addedItems, addedItem],\n                subTotal: newSubTotal,\n                cartTotal: newSubTotal + shippingCost\n            }\n        }\n    }\n\n    //If item is removed from cart, remove item and recalculate subTotal and cartTotal\n    if (action.type === REMOVE_ITEM) {\n        let itemToRemove = state.addedItems.find(item => action.id === item.id);\n        let newItems = state.addedItems.filter(item => action.id !== item.id);\n\n        let newSubTotal = state.subTotal - (itemToRemove.price * itemToRemove.quantity);\n        console.log(itemToRemove);\n        return {\n            ...state,\n            addedItems: newItems,\n            subTotal: newSubTotal,\n            cartTotal: newSubTotal + shippingCost\n        }\n    }\n    \n    // If item quantity is increased, increase quantity by 1 and recalculate subTotal and cartTotal\n    if (action.type === ADD_QUANTITY) {\n        let addedItem = state.items.find(item => item.id === action.id);\n        \n        addedItem.quantity += 1;\n\n        let newSubTotal = state.subTotal + addedItem.price;\n        return {\n            ...state,\n            subTotal: newSubTotal,\n            cartTotal: newSubTotal + shippingCost\n        }\n\n    }\n\n    // If item quantity is decreased, subtract quantity and recalculate subTotal and cartTotal\n    if (action.type === MINUS_QUANTITY) {\n        let addedItem = state.items.find(item => item.id === action.id);\n        if (addedItem.quantity === 1) {\n            let newItems = state.addedItems.filter(item => item.id !== action.id);\n            let newSubTotal = state.subTotal - addedItem.price;\n            return {\n                ...state,\n                addedItems: newItems,\n                subTotal: newSubTotal,\n                cartTotal: newSubTotal + shippingCost\n            }\n        } else {\n            addedItem.quantity -= 1;\n            let newSubTotal = state.subTotal - addedItem.price;\n            return {\n                ...state,\n                subTotal: newSubTotal,\n                cartTotal: newSubTotal + shippingCost\n            }\n        }\n    }\n\n    // Logic to add and subtract shipping costs\n    if (action.type === ADD_SHIPPING) {\n        return {\n            ...state,\n            subTotal: state.subTotal,\n            shipping: shippingCost,\n            cartTotal: state.subTotal + shippingCost\n        }\n    }\n\n    if (action.type === SUBTRACT_SHIPPING) {\n        return {\n            ...state,\n            subTotal: state.subTotal,\n            shipping: 0,\n            cartTotal: state.subTotal - shippingCost\n        }\n    }\n\n    // Logic for in-store pickup\n    if (action.type === ADD_PICKUP) {\n        return {\n            ...state,\n            subTotal: state.subTotal,\n            shipping: 0,\n            cartTotal: state.subTotal\n        }\n    }\n    \n    return state;\n}\n\n\nexport default cartReducer;"]},"metadata":{},"sourceType":"module"}